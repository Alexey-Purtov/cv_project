import streamlit as st
from PIL import Image
from io import BytesIO
import requests
import os
from ultralytics import YOLO
from blur import blur_faces  
import pandas as pd

def face_app():
    @st.cache_resource
    def load_model():
        return "face/face_model.pt"  # Updated path

    model = load_model()

    st.title("üü£ –ê–Ω–æ–Ω–∏–º–∞–π–∑–µ—Ä –ª–∏—Ü —Å –ø–æ–º–æ—â—å—é YOLO")
    option = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", ["–§–∞–π–ª—ã", "–°—Å—ã–ª–∫–∏"])
    images = []

    if option == "–§–∞–π–ª—ã":
        uploaded_files = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ(—è)", type=["jpg", "jpeg", "png"], accept_multiple_files=True)
        for uploaded_file in uploaded_files:
            image = Image.open(uploaded_file).convert("RGB")
            images.append(image)

    elif option == "–°—Å—ã–ª–∫–∏":
        urls = st.text_area("–í—Å—Ç–∞–≤—å—Ç–µ –ø—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–ø–æ –æ–¥–Ω–æ–π –Ω–∞ —Å—Ç—Ä–æ–∫—É)")
        for url in urls.splitlines():
            try:
                response = requests.get(url)
                image = Image.open(BytesIO(response.content)).convert("RGB")
                images.append(image)
            except Exception as e:
                st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —Å—Å—ã–ª–∫–µ: {url}\n{e}")

    if images:
        results = blur_faces(model, images)
        for orig, blurred in zip(images, results):
            st.image(orig, caption="–û—Ä–∏–≥–∏–Ω–∞–ª", use_container_width=True)
            st.image(blurred, caption="–° —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º", use_container_width=True)

        st.subheader("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏")
        csv_path = "face/results.csv"  # Updated path

        if os.path.exists(csv_path):
            df = pd.read_csv(csv_path)
            st.markdown(f"**–ß–∏—Å–ª–æ —ç–ø–æ—Ö:** {len(df)}")
            st.markdown(f"**–û–±—ä—ë–º –≤—ã–±–æ—Ä–∫–∏:** {df['train/box_loss'].count()} (–ø—Ä–∏–º–µ—Ä–Ω–æ)")

            precision_metrics = [col for col in df.columns if "precision" in col]
            recall_metrics = [col for col in df.columns if "recall" in col]
            map_metrics = [col for col in df.columns if "mAP" in col]
            loss_metrics = [col for col in df.columns if "loss" in col]

            if precision_metrics:
                st.subheader("üéØ Precision –ø–æ —ç–ø–æ—Ö–∞–º")
                st.line_chart(df[precision_metrics])

            if recall_metrics:
                st.subheader("üì• Recall –ø–æ —ç–ø–æ—Ö–∞–º")
                st.line_chart(df[recall_metrics])

            if map_metrics:
                st.subheader("üåç mAP –ø–æ —ç–ø–æ—Ö–∞–º")
                st.line_chart(df[map_metrics])

            if loss_metrics:
                st.subheader("üìâ Loss –ø–æ —ç–ø–æ—Ö–∞–º")
                st.line_chart(df[loss_metrics])

            for name in ["confusion_matrix.png", "confusion_matrix_normalized.png"]:
                path = os.path.join("face", name)
                if os.path.exists(path):
                    st.image(path, caption=name)
        else:
            st.warning("–§–∞–π–ª results.csv –Ω–µ –Ω–∞–π–¥–µ–Ω.")
